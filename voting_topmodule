module votingm(clk,reset,admin_code,switch,k,mode,anode,cathode);
input clk;                    //board frequency
input[3:0]switch;       //voter input out of four candidates
input[4:0]admin_code;
input reset;
input mode;               //mode either display or to increment votes
input k;                      //button which is handled by officer
output reg [3:0]anode=4'b1111;//outputs which seven segment display to be turned on
output reg [7:0]cathode=8'b11111111; //input to seven segment displays
wire [7:0]input1,input2,input3; //8 bit output from binary to sevensegment decoder
reg [19:0]count=0;                   //for 1KHz clock
reg clk1k=0;                            //clock
wire clk1k1;
reg[1:0]state=0;
wire[3:0]a1,a2,a3;                 //divide number of votes into three digits

display d1(a3,input1);
display d2(a2,input2);
display d3(a1,input3);
vote v0(reset,admin_code,k,mode,clk1k1,switch,a3,a2,a1);

/////////////////////// 1KHzclock generation/////////////////////////////////////

always @(posedge clk)
begin
    if(count==20'd50000)
    begin
        clk1k<=~clk1k;
        count<=20'd0;
    end
    else
    count<=count+1'b1;
end
assign clk1k1=clk1k;
//////////////////////7-segment display logic/////////////////
always@(posedge clk1k)
case(state)
    0:begin
        anode <= 4'b1110;
            cathode <=input1;   
          state <= state+1'b1;        
            end
    1:begin
        anode <= 4'b1101;     
             cathode <= input2;
        state <= state+1'b1;            
        end
    2:begin
        anode <= 4'b1011;       
        cathode <= input3;
        state<=2'b00;
        end
    default:state<=2'b00;
endcase
endmodule
